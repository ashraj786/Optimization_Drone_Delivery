model final_project
uses "mmxprs"; !gain access to the Xpress-Optimizer solver
uses "mmive" !gain access to graphical capabilities

 parameters
 LIMIT=22
 end-parameters
 !setparam("XPRS_MAXTIME", 4800) - UNCOMMENT IF YOU HAVE TIME CONSTRAINTS

 
 declarations
P= 1..22
graph : integer
x: array(P) of real !declaring random X coordinates
y: array(P) of real !declaring random Y coordinates
Euc: array(P,P) of integer !declaring Euclidean matrix
Truck_travel_bin: array(P,P) of mpvar !declaring truck binary variable
Drones_travel_bin: array(P,P) of mpvar !declaring drones binary variable
Primary_nodes: mpvar !primary nodes no
Secondary_nodes: mpvar !secondary nodes no
Positional: array(P) of mpvar !Positional index for route taken
end-declarations

 writeln("RANDOM numbers(", LIMIT," of them) between 1 and 20 :")
 
setrandseed(7) !you can avoid this in case you need totally random settings each time
cloud:=IVEaddplot("DISTRIBUTION OF GENERATED X and Y", IVE_BLUE)
 forall(p in 2..LIMIT) do
  x(p):= 100*random
   y(p):= 100*random
 end-do
 
   ! origin constraints
  x(1):= 0
  y(1):= 0
  x(22):= 0
  y(22):= 0
!! Used ONLY WHEN Simulating a real fixed example Pls comment lines 26-31 before using lines 39-81
!  x(1) :=0
!  x(2) :=66
!  x(3) :=50
!  x(4) :=41
!  x(5) :=57
!  x(6) :=53
!  x(7) :=44
!  x(8) :=89
!  x(9) :=62
!  x(10) :=67
!  x(11) :=42
!  x(12) :=83
!  x(13) :=82
!  x(14) :=84
!  x(15) :=56
!  x(16) :=6
!  x(17) :=5
!  x(18) :=5
!  x(19) :=13
!  x(20) :=15
!  x(21) :=15
!  x(22) :=0
!  y(1) :=0
!  y(2) :=42
!  y(3) :=70
!  y(4) :=45
!  y(5) :=60
!  y(6) :=56
!  y(7) :=44
!  y(8) :=14
!  y(9) :=12
!  y(10) :=12
!  y(11) :=12
!  y(12) :=14
!  y(13) :=10
!  y(14) :=13
!  y(15) :=14
!  y(16) :=11
!  y(17) :=13
!  y(18) :=12
!  y(19) :=14
!  y(20) :=14
!  y(21) :=11
!  y(22) :=0


 !type_constraints
 forall( p in 1..LIMIT) do
 Positional(p) is_integer
 end-do
 
 !K drones allowed constraints  - MODIFY RHS ACCORDINGLY AS K+1
 forall(i in 2..21) sum(j in 1..LIMIT) Truck_travel_bin(i,j) + sum(j in 1..LIMIT) Drones_travel_bin(i,j)<=5
 
 !Positional Constraints
 Positional(1) = 1
 Positional(22) = sum(i in 1..LIMIT, j in 1..LIMIT) Truck_travel_bin(i,j)+1
 
 forall( i in 1..LIMIT, j in 1..LIMIT)
 Positional(j) >= Positional(i) + 1 - 200*(1-Truck_travel_bin(i,j))
 
 !Balance constraint out - in = 0
 forall(i in 2..21) sum(j in 1..LIMIT) Truck_travel_bin(i,j)-sum(j in 1..LIMIT) Truck_travel_bin(j,i)=0
 
 forall(p in 1..LIMIT,j in 1..LIMIT) do
   Truck_travel_bin(p,j) is_binary
   Drones_travel_bin(p,j) is_binary
 end-do
 
 Primary_nodes is_integer
 Secondary_nodes is_integer
 Primary_nodes >=0
 Secondary_nodes >=0
 
  forall(p in 1..LIMIT,j in 1..LIMIT) do
     Euc(p,j):= round(sqrt((y(j)-y(p))^2 + (x(j)-x(p))^2))
  end-do
 
 !Limit constraints
 
 Primary_nodes + Secondary_nodes =22
 
 sum(i in 1..LIMIT, j in 1..LIMIT) Drones_travel_bin(i,j) = 2*Secondary_nodes
 
 sum(i in 1..LIMIT, j in 1..LIMIT) Truck_travel_bin(i,j) = Primary_nodes -1
 
 ! constraint for removing subtours of drones
 forall(i in 2..21, j in 2..21)
	Drones_travel_bin(i,j) = Drones_travel_bin(j,i)
	
!Constraint for removing subtour of trucks
 forall(i in 2..21, j in 2..21)
	Truck_travel_bin(i,j) + Truck_travel_bin(j,i) <=1
	
forall (i in 2..21, j in 2..21) Drones_travel_bin(i,j) <= sum(a in 1..22) Truck_travel_bin(a,i)+ sum(a in 1..22) Truck_travel_bin(a,j)

! CONSTRAINT FOR Kth 


 ! origin constraints - part 2
 sum(i in 1..LIMIT) Truck_travel_bin(1,i)= 1
 sum(i in 1..LIMIT) Drones_travel_bin(1,i)= 0
 
 sum(i in 1..LIMIT) Truck_travel_bin(i,1)= 0 
 sum(i in 1..LIMIT) Drones_travel_bin(i,1)= 0
 
 
 !last node constraints
 sum(i in 1..LIMIT) Truck_travel_bin(22,i)= 0
 sum(i in 1..LIMIT) Drones_travel_bin(22,i)= 0
 
 sum(i in 1..LIMIT) Truck_travel_bin(i,22)= 1
 sum(i in 1..LIMIT) Drones_travel_bin(i,22)= 0
 
 Truck_travel_bin(1,22) =0
 Truck_travel_bin(22,1) =0 
 
 !removing_arcs_on_itself
 sum(i in 1..LIMIT) Truck_travel_bin(i,i) = 0
 sum(i in 1..LIMIT) Drones_travel_bin(i,i) = 0
 
 !all nodes should be have incoming nodes - except origin
 forall(i in 2..LIMIT) sum(j in 1..LIMIT) Truck_travel_bin(j,i) + sum(j in 1..LIMIT) Drones_travel_bin(j,i) >=1 
  
 !all nodes should have outgoing nodes - except destination
  forall(j in 1..21) sum(i in 1..LIMIT) Truck_travel_bin(j,i) + sum(i in 1..LIMIT) Drones_travel_bin(j,i) >=1
 
  
 ! constraint for not being secondary and primary at the same time
 forall(i in 1..LIMIT, j in 1..LIMIT)
	Truck_travel_bin(i,j) + Drones_travel_bin(i,j) <=1

! constraint for traveling back to j if drone travels from j
 forall(i in 2..21, j in 2..21)
	Drones_travel_bin(i,j) = Drones_travel_bin(j,i)


obj:=sum(i in P)sum(j in P)(Truck_travel_bin(i,j))*Euc(i,j)*10+sum(i in P)sum(j in P)(Drones_travel_bin(i,j))*Euc(i,j)*3
minimize(obj)


 writeln("Printing random numbers generated below:")
 forall(p in 1..LIMIT) do
 writeln("Number ",p," in Array X is :",x(p)," and the Number ",p," in Array  Y is:", y(p))
 end-do
 
 ! GENERATING THE SIMULATED GRAPHICAL SOLUTION
 IVEzoom(0, -0, 10, 10)
 writeln(" Generating the Plot for co-ordinates below")
 graph:=IVEaddplot("Y(X)",IVE_RED)		!Create a graph
 graph2:=IVEaddplot("Y(X)",IVE_GREEN)
 
 forall(p in 1..LIMIT) do
 IVEdrawpoint(graph, x(p), y(p))
 IVEdrawlabel(graph, x(p), y(p), ""+p)
 end-do

 forall(i in 1..LIMIT,j in 1..LIMIT |getsol(Drones_travel_bin(i,j)) > 0) do
 IVEdrawline(graph2, x(i), y(i),x(j), y(j))
 end-do
 
  forall(i in 1..LIMIT,j in 1..LIMIT |getsol(Truck_travel_bin(i,j)) > 0) do
 IVEdrawline(graph, x(i), y(i),x(j), y(j))
 end-do

forall(i in 1..LIMIT,j in 1..LIMIT |getsol(Truck_travel_bin(i,j)) > 0 ) do
	writeln("Send Truck from ",i," to ", j," : ",getsol(Truck_travel_bin(i,j)))
end-do

forall(i in 1..LIMIT,j in 1..LIMIT |getsol(Drones_travel_bin(i,j)) > 0 ) do
	writeln("Send Drones from ",i," to ", j," : ",getsol(Drones_travel_bin(i,j)))
	end-do

end-model